import tensorflow as tf
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.datasets import cifar100
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D, Dropout
from tensorflow.keras.models import Model
from tensorflow.keras.utils import to_categorical
import matplotlib.pyplot as plt

# 1. Load CIFAR100 dataset
(train_images, train_labels), (test_images, test_labels) = cifar100.load_data()

# Normalize pixel values
train_images = train_images.astype('float32') / 255.0
test_images = test_images.astype('float32') / 255.0

# One-hot encode labels
train_labels_one_hot = to_categorical(train_labels)
test_labels_one_hot = to_categorical(test_labels)

# 2. Load MobileNetV2 with ImageNet weights (excluding top)
base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(32, 32, 3))

# Freeze the base model
base_model.trainable = False

# 3. Extract features
train_features = base_model.predict(train_images)
test_features = base_model.predict(test_images)

# 4. Create classification network
input_shape = train_features.shape[1:]  # Shape of the features
classification_input = tf.keras.Input(shape=input_shape)
x = GlobalAveragePooling2D()(classification_input)
x = Dense(256, activation='relu')(x)
x = Dropout(0.5)(x)
output = Dense(100, activation='softmax')(x)  # 100 classes for CIFAR100

classification_model = Model(inputs=classification_input, outputs=output)

# 5. Compile and train the classification network
classification_model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

history = classification_model.fit(train_features, train_labels_one_hot, epochs=20, batch_size=128, validation_split=0.2)

# 6. Evaluate the classification network
test_loss, test_acc = classification_model.evaluate(test_features, test_labels_one_hot)
print(f'Test accuracy: {test_acc}')

# 7. Plotting results
plt.plot(history.history['accuracy'], label='accuracy')
plt.plot(history.history['val_accuracy'], label='val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0.0, 1])
plt.legend(loc='lower right')
plt.show()

plt.plot(history.history['loss'], label='loss')
plt.plot(history.history['val_loss'], label='val_loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.ylim([0.0, 3.0])
plt.legend(loc='upper right')
plt.show()
